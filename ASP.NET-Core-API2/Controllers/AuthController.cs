using ASP.NET_Core_API2.Data;
using ASP.NET_Core_API2.Models;
using ASP.NET_Core_API2.Models.Dtos;
using Microsoft.AspNetCore.Cryptography.KeyDerivation;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.Data;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

namespace ASP.NET_Core_API2.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly DataContextDapper _dapper;
        private readonly IConfiguration _config;


        public AuthController(IConfiguration config)
        {
            _dapper = new DataContextDapper(config);
            _config = config;
        }

        // ---------- Register ----------
        [HttpPost("Register")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public IActionResult Register(UserToRegisterDto userToRegister)
        {
            // check if user entered the same pass and pass confirm. 
            if (userToRegister.Password == userToRegister.PasswordConfirm)
            {
                // check if user already exists in Db.
                string sqlCheckUserExists = "SELECT Email FROM TutorialAppSchema.Auth WHERE Email = '" +
                    userToRegister.Email + "'";
                IEnumerable<string> existingUsers = _dapper.LoadData<string>(sqlCheckUserExists);
                if (existingUsers.Count() == 0)
                {
                    byte[] passwordSalt = new byte[128 / 8];
                    using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
                    {
                        rng.GetNonZeroBytes(passwordSalt);
                    }
                    // passing the randomly generated byte array(salt) with the password to get Hashed. 
                    byte[] passwordHash = GetPasswordHash(userToRegister.Password, passwordSalt);

                    string sqlAddAuth = @"
                        INSERT INTO TutorialAppSchema.Auth  ([Email],
                        [PasswordHash],
                        [PasswordSalt]) VALUES ('" + userToRegister.Email +
                        "', @PasswordHash, @PasswordSalt)";
                    // making sql parameters to pass to dapper with the sql string
                    List<SqlParameter> sqlParameters = new List<SqlParameter>();

                    SqlParameter passwordSaltParameter = new SqlParameter("@PasswordSalt", SqlDbType.VarBinary);
                    passwordSaltParameter.Value = passwordSalt;

                    SqlParameter passwordHashParameter = new SqlParameter("@PasswordHash", SqlDbType.VarBinary);
                    passwordHashParameter.Value = passwordHash;

                    sqlParameters.Add(passwordSaltParameter);
                    sqlParameters.Add(passwordHashParameter);

                    // calling dapper with the sql string and the parameters
                    try
                    {
                        //creating user in auth table
                        if (_dapper.ExecuteSqlWithParameters(sqlAddAuth, sqlParameters))
                        {
                            string sqlAddUser = @"
                            INSERT INTO TutorialAppSchema.Users(
                                [FirstName],
                                [LastName],
                                [Email],
                                [Gender],
                                [Active]
                            ) VALUES (" +
                                "'" + userToRegister.FirstName +
                                "', '" + userToRegister.LastName +
                                "', '" + userToRegister.Email +
                                "', '" + userToRegister.Gender +
                                "', 1)";
                            //create user in Users table
                            if(_dapper.ExecuteSql(sqlAddUser))
                            {
                                return Ok();
                            }
                            return BadRequest("Failed to add user.");
                        }
                    }
                    catch(Exception ex) 
                    {
                        return BadRequest("Failed to register user.");
                    }
                }
                return BadRequest("User with this email already exists!");
            }
            return BadRequest("Passwords do not match!");
        }

        // ---------- Login ----------
        [HttpPost("Login")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        public IActionResult Login(UserToLoginDto userToLogin)
        {
            string sqlForHashAndSalt = @"SELECT 
                [PasswordHash],
                [PasswordSalt] FROM TutorialAppSchema.Auth WHERE Email = '" +
                userToLogin.Email + "'";
            // getting the hased password and salt from Db
            try
            {
                UserToConfirmLoginDto userToConfirmLogin = _dapper
                    .LoadDataSingle<UserToConfirmLoginDto>(sqlForHashAndSalt);

                // hashing the password the user entered with the salt from the Db 
                byte[] passwordHash = GetPasswordHash(userToLogin.Password, userToConfirmLogin.PasswordSalt);
                //comparing the hashed pass from dp with the hash generated from the string pass the user entered in the login form
                for (int index = 0; index < passwordHash.Length; index++)
                {
                    if (passwordHash[index] != userToConfirmLogin.PasswordHash[index])
                    {
                        return StatusCode(401, "Incorrect password!");
                    }
                }
                // if user entered the correct email and pass give him a token that has his id in it 
                string userIdSql = @"
                SELECT UserId FROM TutorialAppSchema.Users WHERE Email = '" +
                 userToLogin.Email + "'";

                int userId = _dapper.LoadDataSingle<int>(userIdSql);

                return Ok(new Dictionary<string, string> {
                    {"token", CreateToken(userId)} });
            }
            catch(Exception ex) 
            {
                return BadRequest("email is invalid!");
            }
        }

        // ---------- Helper Methods ----------
        private byte[] GetPasswordHash(string password, byte[] passwordSalt)
        {
            string passwordSaltPlusString = _config.GetSection("AppSettings:PasswordKey").Value +
                Convert.ToBase64String(passwordSalt);

            return KeyDerivation.Pbkdf2(
                password: password,
                salt: Encoding.ASCII.GetBytes(passwordSaltPlusString),
                prf: KeyDerivationPrf.HMACSHA256,
                iterationCount: 1000000,
                numBytesRequested: 256 / 8
            );
        }

        private string CreateToken(int userId)
        {           
            string? tokenKeyString = _config.GetSection("AppSettings:TokenKey").Value;
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(tokenKeyString??"");
            var descriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
               {
                    new Claim("userId", userId.ToString())
               }),
                Expires = DateTime.UtcNow.AddDays(7),
                SigningCredentials = new(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(descriptor);
            return tokenHandler.WriteToken(token);
        }

    }
}
